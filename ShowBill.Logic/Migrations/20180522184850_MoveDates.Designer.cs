// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ShowBill.Logic;
using System;

namespace ShowBill.Logic.Migrations
{
    [DbContext(typeof(ShowBillDbContext))]
    [Migration("20180522184850_MoveDates")]
    partial class MoveDates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShowBill.Data.Concert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Cost");

                    b.Property<string>("Descriprion");

                    b.Property<int?>("PlaceId");

                    b.Property<int>("Raiting");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("ShowBill.Data.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConcertId");

                    b.Property<DateTime>("DateTime");

                    b.Property<Guid?>("ExhibitionId");

                    b.Property<Guid?>("MovieId");

                    b.Property<Guid?>("PerformanceId");

                    b.Property<Guid?>("SportId");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("ExhibitionId");

                    b.HasIndex("MovieId");

                    b.HasIndex("PerformanceId");

                    b.HasIndex("SportId");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("ShowBill.Data.Exhibition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Cost");

                    b.Property<string>("Descriprion");

                    b.Property<int?>("PlaceId");

                    b.Property<int>("Raiting");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Exhibitions");
                });

            modelBuilder.Entity("ShowBill.Data.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Cost");

                    b.Property<string>("Descriprion");

                    b.Property<int?>("DirectorId");

                    b.Property<int?>("PlaceId");

                    b.Property<int>("Raiting");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ShowBill.Data.Performance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Cost");

                    b.Property<string>("Descriprion");

                    b.Property<int?>("DirectorId");

                    b.Property<int?>("PlaceId");

                    b.Property<int>("Raiting");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("ShowBill.Data.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConcertId");

                    b.Property<Guid?>("ExhibitionId");

                    b.Property<Guid?>("MovieId");

                    b.Property<Guid?>("MovieId1");

                    b.Property<Guid?>("MovieId2");

                    b.Property<Guid?>("MovieId3");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PerformanceId");

                    b.Property<Guid?>("PerformanceId1");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("ExhibitionId");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieId1");

                    b.HasIndex("MovieId2");

                    b.HasIndex("MovieId3");

                    b.HasIndex("PerformanceId");

                    b.HasIndex("PerformanceId1");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ShowBill.Data.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConcertId");

                    b.Property<Guid?>("ExhibitionId");

                    b.Property<Guid?>("MovieId");

                    b.Property<Guid?>("PerformanceId");

                    b.Property<Guid?>("SportId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("ExhibitionId");

                    b.HasIndex("MovieId");

                    b.HasIndex("PerformanceId");

                    b.HasIndex("SportId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ShowBill.Data.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ShowBill.Data.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Cost");

                    b.Property<string>("Descriprion");

                    b.Property<int?>("PlaceId");

                    b.Property<int>("Raiting");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("ShowBill.Data.Concert", b =>
                {
                    b.HasOne("ShowBill.Data.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("ShowBill.Data.Date", b =>
                {
                    b.HasOne("ShowBill.Data.Concert")
                        .WithMany("Dates")
                        .HasForeignKey("ConcertId");

                    b.HasOne("ShowBill.Data.Exhibition")
                        .WithMany("Dates")
                        .HasForeignKey("ExhibitionId");

                    b.HasOne("ShowBill.Data.Movie")
                        .WithMany("Dates")
                        .HasForeignKey("MovieId");

                    b.HasOne("ShowBill.Data.Performance")
                        .WithMany("Dates")
                        .HasForeignKey("PerformanceId");

                    b.HasOne("ShowBill.Data.Sport")
                        .WithMany("Dates")
                        .HasForeignKey("SportId");
                });

            modelBuilder.Entity("ShowBill.Data.Exhibition", b =>
                {
                    b.HasOne("ShowBill.Data.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("ShowBill.Data.Movie", b =>
                {
                    b.HasOne("ShowBill.Data.Person", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.HasOne("ShowBill.Data.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("ShowBill.Data.Performance", b =>
                {
                    b.HasOne("ShowBill.Data.Person", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.HasOne("ShowBill.Data.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("ShowBill.Data.Person", b =>
                {
                    b.HasOne("ShowBill.Data.Concert")
                        .WithMany("Artists")
                        .HasForeignKey("ConcertId");

                    b.HasOne("ShowBill.Data.Exhibition")
                        .WithMany("Artists")
                        .HasForeignKey("ExhibitionId");

                    b.HasOne("ShowBill.Data.Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId");

                    b.HasOne("ShowBill.Data.Movie")
                        .WithMany("Composers")
                        .HasForeignKey("MovieId1");

                    b.HasOne("ShowBill.Data.Movie")
                        .WithMany("Producers")
                        .HasForeignKey("MovieId2");

                    b.HasOne("ShowBill.Data.Movie")
                        .WithMany("Screenwriters")
                        .HasForeignKey("MovieId3");

                    b.HasOne("ShowBill.Data.Performance")
                        .WithMany("Actors")
                        .HasForeignKey("PerformanceId");

                    b.HasOne("ShowBill.Data.Performance")
                        .WithMany("Authors")
                        .HasForeignKey("PerformanceId1");
                });

            modelBuilder.Entity("ShowBill.Data.Photo", b =>
                {
                    b.HasOne("ShowBill.Data.Concert")
                        .WithMany("Photos")
                        .HasForeignKey("ConcertId");

                    b.HasOne("ShowBill.Data.Exhibition")
                        .WithMany("Photos")
                        .HasForeignKey("ExhibitionId");

                    b.HasOne("ShowBill.Data.Movie")
                        .WithMany("Photos")
                        .HasForeignKey("MovieId");

                    b.HasOne("ShowBill.Data.Performance")
                        .WithMany("Photos")
                        .HasForeignKey("PerformanceId");

                    b.HasOne("ShowBill.Data.Sport")
                        .WithMany("Photos")
                        .HasForeignKey("SportId");
                });

            modelBuilder.Entity("ShowBill.Data.Sport", b =>
                {
                    b.HasOne("ShowBill.Data.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });
#pragma warning restore 612, 618
        }
    }
}
