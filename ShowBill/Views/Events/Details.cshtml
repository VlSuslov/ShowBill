@using ShowBill.Data;
@using ShowBill.Models.EventModels;
@using System.Globalization;
@model ShowBill.Models.EventModels.EventViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="jumbotron unset-paddings">
    <div>
        <hr />
        <div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="6000">
            <ol class="carousel-indicators">
                @for (int i = 0; i < Model.Photos.Count(); i++)
                {
                    @if (i == 0)
                    {
                        <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
                    }
                    else
                    {
                        <li data-target="#myCarousel" data-slide-to="@i"></li>
                    }
                }
            </ol>
            <div class="carousel-inner" role="listbox">
                @for (int j = 0; j < Model.Photos.Count(); j++)
                {
                    @if (j == 0)
                    {
                        <div class="item active">
                            <img src=@Model.Photos[0] class="img-responsive" />
                            <div class="carousel-caption" role="option">
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="item">
                            <img src=@Model.Photos[j] class="img-responsive" />
                            <div class="carousel-caption" role="option">
                            </div>
                        </div>
                    }
                }
            </div>
            <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
                <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
                <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
        <div class="container inline-content">
            <div class="row">
                <div class="col-xs-12">
                    <h2> @Html.DisplayFor(model => model.Title) </h2>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12">
                    <p>@Html.DisplayFor(model => model.Descriprion)</p>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-2">
                    <b>@Html.DisplayNameFor(model => model.Place)</b>
                </div>
                <div class="col-xs-6 inline-content">
                    <div> @Html.DisplayFor(model => model.Place.Name) </div>
                    <div id="map" class="details-map"></div>
                </div>
            </div>
            @if (Model.Cost != null || Model.Cost != 0)
            {
                <div class="row">
                    <div class="col-xs-2">
                        <b>@Html.DisplayNameFor(model => model.Cost)</b>
                    </div>
                    <div class="col-xs-6 inline-content">
                        @Html.DisplayFor(model => model.Cost) $
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-xs-2">
                    <b>@Html.DisplayNameFor(model => model.Date)</b>
                </div>
                <div class="col-xs-6 inline-content">
                    @Html.DisplayFor(model => model.Date)
                </div>
            </div>
            @if (Model.Seanses.Any())
            {
                <div class="row">
                    <div class="col-xs-2">
                        <b>@Html.DisplayNameFor(model => model.Seanses)</b>
                    </div>
                    <div class="col-xs-6 inline-content">
                        @foreach (var seanse in Model.Seanses)
                        {
                            <div>
                                @seanse
                            </div>
                        }
                    </div>
                </div>
            }
            @switch (Model.Type)
            {
                case EventType.Concert:
                    {
                        @Html.Partial(@".\PartialDetails\ArtistsEventDetails", Model as ArtistsEventViewModel)
                        break;
                    };
                case EventType.Exhibition:
                    {
                        @Html.Partial(@".\PartialDetails\ArtistsEventDetails", Model as ArtistsEventViewModel)
                        break;
                    };
                case EventType.Performance:
                    {
                        @Html.Partial(@".\PartialDetails\PerformanceDetails", Model as PerformanceViewModel)
                        break;
                    };
                case EventType.Movie:
                    {
                        @Html.Partial(@".\PartialDetails\MovieDetails", Model as MovieViewModel)
                        break;
                    };
                default: { break; };
            }
        </div>
    </div>
</div>
@section scripts
    {
    <script>
        function initMap() {
            const position = { lat: @Model.Place.Latitude.ToString(new CultureInfo("en-US")), lng: @Model.Place.Longitude.ToString(new CultureInfo("en-US"))};
            const map = new google.maps.Map($("#map")[0], {
                zoom: 4,
                center: position
            });
              let marker =   new google.maps.Marker({
                  position: position,
                  map: map
                });
        };
    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBPGc90XeG6f7Gq42HQR_3ZJSRvZV3n32M&callback=initMap"></script>
}

